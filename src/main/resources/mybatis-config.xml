<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
    核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱):
    properties?,settings?,typeAliases?,typeHandlers?
    ,objectFactory?,objectWrapperFactory?,reflectorFactory?,
    plugins?,environments?,databaseIdProvider?,mappers?
    -->
    <!-- 引入properties文件,从配置中取出数据库地址,账号,密码  -->
    <properties resource="application.properties"/>

    <!--设置类型别名-->
    <typeAliases>
        <!--
            设置这个属性以后,在UserMapper.xml就可以用alias代替type
            alias的默认值为类型的别名,不区分大小写
         -->
        <!--        <typeAlias type="com.example.demo.po.User" alias="User"></typeAlias>-->

        <!--以包为单位,将包下所有的类型设置默认的类型别名:主要用于给包下多个类设置别名-->
        <package name="com.example.demo.po"/>
    </typeAliases>

    <!--
        environments: 设置连接数据库的环境
        属性:
            default: 设置默认使用的环境的id
     -->
    <environments default="development">
        <!--
        environment: 设置某个具体的环境
        属性:
            id: 表示连接数据库的环境的唯一标识,不能重复
        -->
        <environment id="development">
            <!--
                transactionManager: 设置事务管理方法
                属性:
                    type="JDBC|MANAGED"
                    JDBC: 标识当前环境中,执行SQL时,使用的是JDBC中的原生事务管理方式,事务的提交或回滚需要手动执行
                    MANAGED: 被管理,例如Spring
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource:配置数据源    Spring中有数据源,不需要关心
                属性:
                    type:设置数据源的类型
                    type="POOLED|UNPOOLED|JNDI"
                    POOLED:标识使用数据库连接池缓存数据库连接
                    UNPOOLED:标识不使用数据库连接池
                    JNDI:标识使用上下文中的数据库
            -->
            <dataSource type="POOLED">
                <!--设置连接数据库的驱动-->
                <property name="driver" value="${jdbc.driver}"/>
                <!--设置连接数据库的连接地址-->
                <property name="url" value="${jdbc.url}"/>
                <!--设置连接数据库的用户名-->
                <property name="username" value="${jdbc.username}"/>
                <!--设置连接数据库的密码-->
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--引入映射文件-->
    <mappers>
        <!--        <mapper resource="mappers/UserMapper.xml"/>-->
        <!--
            以包为单位引入映射文件(批量引入)
            要求:
            1.mapper接口所在的包要和映射文件所在的包一致:
                java.com.example.demo.mapper == resources.com.example.demo.mapper
            2.mapper接口要和映射文件的名字一致:
                UserMapper.java == UserMapper.xml
        -->
        <package name="com.example.demo.mapper"/>
    </mappers>
</configuration>